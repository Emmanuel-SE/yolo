version: "3.5"

services:
  yolo.app:
        build:
          context: .
          dockerfile: Dockerfile
        container_name: yolo-app
        stdin_open: true
        command: npm run dev 
        ports:
          - "3000:3000"
          - "5001:5001"
        volumes:
          - "./client:/var/www/client"
          - "./backend:/var/www/backend"
        networks:
          - yolo_net

  yolo.db:
    image: mongo:latest
    container_name: yolo_db
    stdin_open: true
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: local
    ports:
      - "0.0.0.0:27017:27017"
    networks:
      - yolo_net
    restart: unless-stopped 
    volumes:
      - type: volume
        source: mongo_data
        target: /data/db
      - type: volume
        source: mongo_config
        target: /data/configdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  mongo.express:
    image: mongo-express:latest
    container_name: mongo_express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
      ME_CONFIG_MONGODB_URL: mongodb://yolo.db:27017/local
    ports:
      - "0.0.0.0:8081:8081"
    networks:
      - yolo_net
    depends_on:
      yolo.db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' --quiet"]
      retries: 30
      interval: 10s
      timeout: 10s

networks:
  yolo_net:
    driver: bridge
    name: yolo_net

volumes:
  mongo_data:
    name: mongo_data
    driver: local 
  mongo_config:
    name: mongo_config
    driver: local